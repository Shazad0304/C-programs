#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/shm.h>
#define TEXT_SZ 256
#define MSG_SZ 240
#include <pthread.h>
///omer(60154)
struct shared_use_st{
	char message[TEXT_SZ];
};

int AttachSharedMemory()
{
	void *shared_memory = (void *)0;
	struct shared_use_st *shared_stuff;
	char buffer[BUFSIZ];
	int shmid;

	shmid = shmget((key_t)1234, sizeof(struct shared_use_st), 0666);

	if(shmid == -1){
		fprintf(stderr, "shmget failed\n");
		exit(EXIT_FAILURE);
	shared_memory = shmat(shmid, (void *)0, 0);
	if(shared_memory == (void *)-1){
		fprintf(stderr, "shmat failed\n");
		exit(EXIT_FAILURE);
	}
	printf("Memory attached at %X\n", (int)shared_memory);	
}
void *alive_function(void *arg)
{
	char *alive[16];
	int running=1;
	alive[0]='/0';
	strcat(alive,"Alive---");
    strcat(alive,shared_stuff->myname); 
	while(running)
	{	
	    sleep(10);	
        strncpy(shared_stuff->message, alive, 16);
        shared_stuff->message="";
	}
	pthread_exit(0);
}
void *sendmsg_function(void *arg)
{
	int running=1;
	char con[TEXT_SZ];
	char mymsg[239];
	char *quit[16];
	char *list[16];
	int semid=semget(key,nsems,IPC_CREAT|0666);
	while(running){
    	if(shared_stuff->message="")   //if message board is free then send message first conmect messages to  be sent then chatting
    	{
    	     printf("Enter Source, Destination and Message ");
    	     sem_wait(shared_stuff->message); 
             scanf("%d", &con);
             sem_signal(shared_stuff->message); 
             if(strncmp(con,"@Quit",5)==0)
             { 
	            quit[0]='/0';
	            sem_wait(shared_stuff->message); 
	            strcat(quit,"Quit----");
                strcat(quit,shared_stuff->myname); 	
                strncpy(shared_stuff->message, quit, 16);
                 sem_signal(shared_stuff->message); 
                exit( );
		     }
		   
		     if(strncmp(con,"@List",5)==0)
             { 
                 sem_wait(shared_stuff->message); 
	            quit[0]='/0';
	            strcat(list,"List----");
                strcat(list,shared_stuff->myname); 	
                strncpy(shared_stuff->message, quit, 16);
                 sem_signal(shared_stuff->message); 
		     }
		 
    	   strncpy(shared_stuff->message, con,TEXT_SZ);
    	    sem_signal(shared_stuff->message); 
    	   running=0;
		}
//saad(60181)		
    	else if(strncmp(shared_stuff->message,myname,8)==0)
		{
			sem_wait(shared_stuff->message); 
			 strcpy(mymsg,&message[16]);
	         printf("Message: %d",mymsg);
	         shared_stuff->message="";
	          sem_signal(shared_stuff->message); 
		}			
		else if (strncmp(shared_stuff->message,"All",3)==0)
		{	sem_wait(shared_stuff->message); 	
			 strcpy(mymsg,&message[16]);
	         printf("Message: %d",mymsg);
	         shared_stuff->message="";
			sem_signal(shared_stuff->message); 		
		}
		running=1;
	}
		pthread_exit(0);
}





int main(int argc, char *argv[]) {
	int running =1;
    void *shared_memory = (void *)0;
    struct shared_use_st *shared_stuff;
    shared_stuff = (struct shared_use_st *)shared_memory;
    char *connectmsg[16];
    char  myname[8];
    connectmsg[0]='/0';
    scanf("%d",myname);
    strncpy(shared_stuff->myname, myname, 8);
    strcat(connectmsg,"CONNECT-");
    strcat(connectmsg,myname); 	
    strncpy(shared_stuff->message, connectmsg, 16);
    pthread_t aliveThread;
    pthread_t sendmessage;
    int* p;
    pthread_create(&sendmessage, NULL, sendmsg_function, (void*)(p));
    pthread_create(&aliveThread, NULL, alive_function, (void*)(p));
    pthread_join(sendmessage,(void**)&p);
    pthread_join(aliveThread,(void**)&p);
    
    
    //Detach Shared Memory
	if (shmdt(shared_memory) == -1)
    {
      fprintf(stderr, "shmdt failed\n");
      exit(EXIT_FAILURE);
    }
    exit(EXIT_SUCCESS);
    
 
    
	return 0;
}
